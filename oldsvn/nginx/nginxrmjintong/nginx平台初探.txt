从上面，我们可以看到，除了http1.0不带content-length
以及http1.1非chunked不带content-length外，body的长度是可知的。
此时，当服务端在输出完body之后，会可以考虑使用长连接。
能否使用长连接，也是有条件限制的。如果客户端的请求头中的connection为close，
则表示客户端需要关掉长连接，如果为keep-alive，则客户端需要打开长连接，
如果客户端的请求中没有connection这个头，那么根据协议，如果是http1.0，则默认为close，
如果是http1.1，则默认为keep-alive。如果结果为keepalive，
那么，nginx在输出完响应体后，会设置当前连接的keepalive属性，
然后等待客户端下一次请求。当然，nginx不可能一直等待下去，
如果客户端一直不发数据过来，岂不是一直占用这个连接？
所以当nginx设置了keepalive等待下一次的请求时，同时也会设置一个最大等待时间，
这个时间是通过选项keepalive_timeout来配置的，如果配置为0，则表示关掉keepalive，
此时，http版本无论是1.1还是1.0，客户端的connection不管是close还是keepalive，都会强制为close。

pipe

在http1.1中，引入了一种新的特性，即pipeline。那么什么是pipeline呢？
pipeline其实就是流水线作业，它可以看作为keepalive的一种升华，
因为pipeline也是基于长连接的，目的就是利用一个连接做多次请求。
如果客户端要提交多个请求，对于keepalive来说，那么第二个请求，
必须要等到第一个请求的响应接收完全后，才能发起，
这和TCP的停止等待协议是一样的，得到两个响应的时间至少为2*RTT。
而对pipeline来说，客户端不必等到第一个请求处理完后，就可以马上发起第二个请求。
得到两个响应的时间可能能够达到1*RTT。nginx是直接支持pipeline的，
但是，nginx对pipeline中的多个请求的处理却不是并行的，依然是一个请求接一个请求的处理，
只是在处理第一个请求的时候，客户端就可以发起第二个请求。
这样，nginx利用pipeline减少了处理完一个请求后，等待第二个请求的请求头数据的时间。
其实nginx的做法很简单，前面说到，nginx在读取数据时，会将读取的数据放到一个buffer里面，
所以，如果nginx在处理完前一个请求后，如果发现buffer里面还有数据，
就认为剩下的数据是下一个请求的开始，然后就接下来处理下一个请求，否则就设置keepalive。



