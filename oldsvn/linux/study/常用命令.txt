find用法

find -iname不区分大小写
find -size + 表示大于某个字节 - 表示小于某个字节
find -cmin 访问时间
     -amin 文件属性
     -mmim 文件内容
例如 find /etc -cmin -5 表示五分钟之内文件属性被修改过

-a 表示 and 连接字符（两个条件必须都满足）
-o 标示 or (两个条件满足一个即可)
-type 根据文件类型查找
	f 文件 d 目录 l 软链接文件、
例如 find /etc/ -name init* -a -type d

查找某个文件夹下的包含某个字符的文件
find /usr/local/src/mysql-5.5.28 -type f -name "*.*" | xargs grep "Too many connections"


对find 结果做操作
find / -name inittab -exec ls -l {} \;
可以用 -exec/-ok 命令 {} \; 对搜索结果执行操作
{} 标示find 查找的结果 \ 转义符号 
其中-ok标示询问确认

-inum 
find . -inum *** -exec rm {} \;

find . -inum 787476 -exec mv {} gitstudy.txt \;
修改乱码文件名称


用find 可以查找任何文件的硬连接
##软链接硬链接
我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)
用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；
而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息
在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名

 Linux 系统中查看 inode 号可使用命令 stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，
其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。
为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。
链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。
若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名
（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。


由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性：

    * 文件有相同的 inode 及 data block；
    * 只能对已存在的文件进行创建；
    * 不能交叉文件系统进行硬链接的创建；
    * 不能对目录进行创建，只可对文件创建；
    * 删除一个硬链接文件并不影响其他有相同 inode 号的文件。

软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。
软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的 inode 号以及用户数据块（见 图 2.）。
因此软链接的创建与使用没有类似硬链接的诸多限制：

 // 可对不存在的文件创建软链接
 # ln -s old.file soft.link 
 # ls -liF 
 total 0 
 789467 lrwxrwxrwx 1 root root 8 Sep  1 18:00 soft.link -> old.file 

 // 由于被指向的文件不存在，此时的软链接 soft.link 就是死链接
 # cat soft.link 
 cat: soft.link: No such file or directory 

 // 创建被指向的文件 old.file，soft.link 恢复成正常的软链接
 # echo "This is an original file_A" >> old.file 
 # cat soft.link 
 This is an original file_A 

 // 对不存在的目录创建软链接
 # ln -s old.dir soft.link.dir 
 # mkdir -p old.dir/test 
 # tree . -F --inodes 
 . 
├── [ 789497]  old.dir/ 
│   └── [ 789498]  test/ 
├── [ 789495]  old.file 
├── [ 789495]  soft.link -> old.file 
└── [ 789497]  soft.link.dir -> old.dir/




查找某个文件夹下的包含某个字符的文件
find /usr/local/src/mysql-5.5.28 -type f -name "*.*" | xargs grep "Too many connections"

locate 用法
locate inittab
查找inittab所在的位置

updatedb 更新文件资料库

which 
查找命令所在的目录

whereis
找到文件命令的绝对路径和帮助文档

文件内容搜索
例如 grep multiuser /etc/inittab

find / -name 'httpd.conf' -exec ls -l {} and -exec grep Listen {} \;

grep -v 排除指定字符
cat /usr/local/apache2/conf/httpd.conf | grep -v ^# |grep -v ^[\s]+#



##############文件搜索与帮助命令###################


man php 查看php配置文件




###############用户相关#############################
useradd
创建用户

passwd
设置密码


#############网络命令###################################
write
给用户发消息

wall "message"
给所有用户都发消息

ping
-c n ping的次数

ifconfig

mail
邮件部分
h 查看列表
1 查看第一封邮件
d 1 删除第一封邮件


last
##查询所有用户所有登陆信息
登陆用户  终端        来源ip		登陆时间	  状态（如下 还在登陆）
root     pts/1        192.168.0.105    Sun Nov 16 20:42   still logged in
 

lastlog
##查看用户最后一次登陆信息
lastlog -u uid (只看该uid用户的登陆信息)

traceroute
##探测到达某个主机的信息（跟踪路由）

netstat
##显示网络相关服务
选项如下
-t TCP协议
-u UDP协议
-l 监听
-r 路由
-n 显示ip地址和端口号

例如
netstat -tlun 查看本机监听的端口
netstat -an 查看本机所有的网络连接
netstat -rn 查看本机路由表


/etc/service里面定义服务
tcp 三次握手 
udp 不握手

tcp 传送控制协议(面向连接) （类似打电话）
udp 用户数据报谢谢 （类似发短信）


例子
netstat -tlun
协议  接收队列书 发送队列数 ip和端口（服务器端口） 		
Proto Recv-Q Send-Q Local Address               Foreign Address             State      
tcp        0      0 127.0.0.1:2208              0.0.0.0:*                   LISTEN      

tcp 有监听的
udp 没有监听的

不明白 Foreign Address

####netstat -an例子
Proto Recv-Q Send-Q Local Address               Foreign Address             State
tcp        0      0 ::ffff:192.168.0.103:22     ::ffff:192.168.0.105:1976   ESTABLISHED 
tcp        0      0 ::ffff:192.168.0.103:22     ::ffff:192.168.0.105:1976   ESTABLISHED 
tcp        0      0 ::ffff:192.168.0.103:22     ::ffff:192.168.0.105:1975   ESTABLISHED 

1976和1975表示连接计算机的端口（原端口）


ESTABLISHED （表示当前正在连接）

下面部分表示计算机程序所占用的端口
Active UNIX domain sockets (servers and established)
Proto RefCnt Flags       Type       State         I-Node Path

#挂载光盘
mount iso9660 /dev/sr0 /mnt/cdrom

umount /dev/sr0

#############vi的使用###############
a 光标所在字符后插入
A 光标所在行尾插入
i 光标所在字符前插入
I 光标所在行行首插入
o
O

set nonu

gg 到第一行
G 到最后一行
nG 到某行
或者在命令行输入行+回车()
$ 移至行尾
0 移至行首

x 删除光标所在字符
nx sha
dd 删除行
ndd 删除n行
dG 删除光标所有行到文件末尾内容
D 删除光标所在处到行尾内容
:n2,n2d 删除自动范围的行

复制和粘贴
yy 复制当前行


/要替换

/r /pathoffile (文件引过来)
:!shell command(不退出vi 执行shell)
:r !date (会把命令结果引过来)
2014年 11月 17日 星期一 20:55:24 CST


产生swp文件
用 vim -r filename 恢复


#######################软件包管理#############################
rpm -V 包名

rmp2cpio 包全名 

cpio 选项

rpm -qf /bin/ls (查找rpm输入哪个软件包)
coreutils-5.97-23.el5_4.2

rpm2cpio /mnt/cdro,m/Packages/coreutils-5.97-23.el5_4.2| cpio -idv ./bin/ls

cp /root/bin/ls /bin/

######yum在线管理####################
/etc/sysconfig/network-scripts/ifcfg-eth0
ONBOOT='NO' 改为
ONBOOT='yes'

网络yum源的地址为
/etc/yum.repos.d/CentOS-Base.repo

###例子
[base]
name=CentOS-$releasever - Base
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5

##说明
[base] 容器名称，一定要放在[]中
name 容器说明
mirrorlist 镜像站点，这个可以注释掉
baseurl 我们的yum源服务器的地址，默认是centos的官方yum源服务器， 可以改成自己喜欢的yum源地址
enabled 此容器是否生效，如果不写货写成enable=1都是生效的
gpgcheck 如果是1是指rpm的数字证书生效，如果是0，则不生效
gpgkey 数字证书的公钥文件保存的位置，不用修改

###yum命令
yum list （查询所有可用的软件包列表）
yum search 关键字 （搜索服务器上所有和关键字相关的包）
yum -y update 包名 （更新包） 慎用
yum -y remove 包名  慎用

###yum 软件组管理
yum grouplist
yum groupinstall 软件组名
yum groupremove 软件组名


####RPM包默认安装位置
/etc/ 		配置文件
/usr/bin/	可执行文件	
/usr/lib/	函数库
/usr/share/doc/	基本软件使用手册
/usr/share/man/ 帮助文件


###源码安装
./configure --help (查看所有的可以跟的参数)
make clean

####用户组###




#######文件系统

df 文件系统
-a 显示所有文件系统的信息，包括test文件系统 如 /proc /sysfs
-h 使用习惯单位显示容量
-T 显示文件系统类型
-m 以MB为单位显示容量
-k 以KB为单位显示容量


du (统计目录或者文件大小)
du -sh 
-a 显示每个文件磁盘占用量
-h 使用习惯单位显示磁盘的占用量
-s 统计总占用量，而不列出子目录和子文件的占用量

fsck 文件系统修复命令
-a 不用显示用户提示
-y 自动修复


dumpe2fs /dev/sda1(显示磁盘状态的)


############Linux支持NTFS文件系统的
ntf-3g 插件




#############文件系统管理########################

###fdisk使用
fdisk -l (查询系统识别的硬盘、列出全部的分区)

fdisk /dev/sdb

　[root@localhost beinan]# fdisk /dev/sda
　　Command (m for help): 在这里按m ，就会输出帮助；
　　Command action
　　a toggle a bootable flag
　　b edit bsd disklabel
　　c toggle the dos compatibility flag
　　d delete a partition 注：这是删除一个分区的动作；
　　l list known partition types 注：l是列出分区类型，以供我们设置相应分区的类型；
　　m print this menu 注：m 是列出帮助信息；
　　n add a new partition 注：添加一个分区；
　　o create a new empty DOS partition table
　　p print the partition table 注：p列出分区表；
　　q quit without saving changes 注：不保存退出；
　　s create a new empty Sun disklabel
　　t change a partition's system id 注：t 改变分区类型；
　　u change display/entry units
　　v verify the partition table
　　w write table to disk and exit 注：把分区表写入硬盘并退出；
　　x extra functionality (experts only) 注：扩展应用，专家功能；

###自动挂载
要写入/etc/fstab文件
dumpe2fs -h /dev/sda1 (查看新分区的设备文件名)

Filesystem volume name:   /boot
Last mounted on:          <not available>
Filesystem UUID:          045c6ab4-5c04-44f1-8361-534c02870d1f (为分区的设备文件名) 

/etc/fstab文件的内容
LABEL=/boot             /boot                   ext3    defaults        	1 2

UUID 分区的uuid（或名称） 挂载点		文件系统 自动挂载使用默认权限   | |
										| |
										| |
										| |
										| |
										| |
指定分区是否被dump备份（0代表不备份，1代表每天备份，2代表不定期备份）<<<--------| |------------->>>>>指定分区是否被fsck检测，0：不检测，其它数字代表检测优先级

lost+found （备份分区的内容）

用mount -a 命令 （根据/etc/fstab文件自动挂载一遍系统分区）

mount -o remount,rw / (将 / 挂载成读写)	


###########################shell编程##########################
linux支持的shell可以再/etc/shells中查看
在Linux各种shell切换可以用 入 sh csh 等等进行切换
/sbin/nologin

###shell执行方式#####
echo -e  支持反斜线特殊字符转义

转义字符如下
字符	意义
\\ 	插入\字符；
\a 	发出警告声；
\b 	退格符（删除前一个字符，向左删除键）
\c 	最后不加上换行符号（取消输出行末的换行符，和-n 选项一致）；
\e	ESCAPE键
\f	换页符
\n 	换行且光标移至行首
\r	回车键
\t	制表符
\v	垂直制表符
\0nnn	按照八进制ASCII码表输出字符。
\xhh	按照十六进制ASCII码表输出字符。


\e[1;	开启颜色输出
\e[0m	结束颜色输出
例如
echo -e "\e[1;31mabcd\e[0m";

30m=黑色，31m=红色，32m=绿色，33m=黄色
34m=蓝色，35m=洋红，36m=青色，37m=白色


cat -A 查看所有字符
#!/bin/bash$
#The first program$
echo -e "This is my first shell script!"$

###说明 linux中回车符是$
一些在windonw中编辑的shell回车是用ctrlM+$作为回车的所以要将windown的转成linux，要用到命令doc2unix
用法为 doc2unix /file
与之相对于的是unix2doc /file


#################shell的基本功能###############
##别名命令
alias 别名='原命令' #设置命令别名
alias 查询命令别名

/root/.bashrc (直接修改该文件，设置别名)

unalias 取消别名

base 常用快捷键

ctrl+A		把光标移动命令行开头
ctrl+E		把光标移动到命令行结尾
ctrl+C		强制终止当前命令
ctrl+L		清屏
ctrl+U		删除或剪切光标之前的命令
ctrl+K		删除或剪切光标之后的内容
ctrl+Y		粘贴ctru+U或ctrl+K的内容
ctrl+R		在历史命令中搜索
ctrl+D		退出当且的终端
ctrl+Z		暂停，并放入后台
ctrl+S		暂停屏幕输出
ctrl+Q		恢复屏幕输出

#####输入输出重定向#######
标准输入输出
设备		设备文件名	文件描述符	类型	
键盘		/dev/stdin	  0		标准输入
显示器		/dev/stdout	  1		标准输出
显示器		/dev/stderr	  2		标准错误输出

输出重定向
标准输出	命令>>文件
标准错误	错误命令 2 >>文件

例如故意输出错误 lst 2>>abc （没有lst命令错误信息定向到abc中）

正确输入和错误输出同城保存
命令> 文件 2>&1		 以覆盖方式，把正确输出和错误输出都保存到一个文件中
命令>>文件 2>&1		 以追加方式，把正确输出和错误输出都保存到一个文件中
命令 &>文件 		 以覆盖方式，把正确输出和错误输出都保存到一个文件中
命令 &>>文件		 以追加方式，把正确输出和错误输出都保存到一个文件中
命令>>文件1 2>>文件2	 把正确输出追加到文件1中，把错误输出追加到文件2中


wc 输入 按ctrl+D
统计
-c 统计字节数
-w 统计单词数
-l 统计行数

####多名利顺序执行与管道符
dd if=输入文件 of=输出文件 bs=字节数 count=个数
例如
date;dd if=/dev/zero of=/root/restfile bs=1k count=100000;date;

grep [选项] "搜索内容" 文件名
选项
-i		忽略大小写
-n		输出行数
-v		反向查找
--color=auto	搜索出的关键字用颜色显示

############通配符和其他特殊符号###########
通配符匹配文件名
`` 反引号是系统命令
$() 和反引号作用一样，用来引用系统命令
$ 调用变量值
\ 转义符

####用户自定义变量
aa 变量叠加如下
"$aa"789
${aa}789
用set查看系统的所有变量
unset name 取消变量

############环境变量############
用户自定义变量只在当前shell生效，环境变量会在当前shell和这个shell
所在shell中生效。如果环境变量写入相应配置文件，环境变量就会在所有的
shell中生效。

设置环境变量
export 变量名=变量值
例如
export age=18 (定义环境变量age)
sex=nan (定义一个自定义普通变量)
export sex (将定义好sex变量设置成环境变量)

env （查询环境变量）
set （查询所有的变量）
清空环境变量和普通变量一样用
unset

PS1 定义系统提示符的变量
\d	显示格式，格式为"星期 月 日"
\h	显示简写主机名。如默认主机名 "localhost"
\t	显示24小时制时间，格式为"HH:MM:SS"
\T	显示12小时制时间，格式为"HH:MM"
\A	显示24小时制时间，格式为"HH:MM"
\u	显示当前用户名
\w	显示当前所在目录的完整名称
\W	显示当前所有目录的最后一个目录
\#	执行的第几个命令
\$	提示符。如果root显示"#",普通用户显示"$"

##位置参数变量#####
$n	n为数字，$0代表命令本身，$1-$9代表第一个到第九个参数，十以上的参数用大括号，如${10}
$*	这个变量代表命令行所有的参数，$*把所有的参数看成一个整体
$@	这个参数也代表命令行所有参数，不过$@把每个参数区分对待
$#	这个变量代表命令行中所有参数的个数







父子进程用
pstree



#########预定义变量###########
$?	最后一次执行命令的返回状态,如果为0，证明上一个命令正确执行；如果为非0（具体是哪个数，由命令自己决定），证明上一个命令执行不正确
$$	当前进程的进程号
$!	后台运行的最后一个进程的进程号

###接收键盘输入
read [选项] [变量名]
选项
-p "提示信息" 在等待read输入时，输出提示信息
-t 秒数		read命令会一直等待用户输入，使用此选项可以指定等待时间
-n 字符数	read命令只接收指定的字符数，就会执行
-s		隐藏输入的数据，适用机密信息的输入

####数值运算与运算符###
decalre [+/-][选项]  变量名
选项
-	给变量设定类型属性
+	取消变量类型属性
-i	将变量声明为整数型
-x	将变量声明为环境变量
-p	显示指定变量的被声明的类型

declare -p PATH
declare -x PATH="/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/src/rabbitmq_server-3.3.4/sbin:/root/bin"

例如
aa=11
bb=22
若想计算aa和bb之和
可以用cc=$(($aa+bb))  cc=$[$aa+$bb]
或者用declare -i cc=$aa+$bb
或者用cc=$(expr $aa + $bb)  (注意+号左右两侧必须有空格);

##########变量测试与内容测试#############
-----------------------------------------------------------
变量置换方式  |	变量y没有设置 |	变量y为空   |	变量y设置值
-----------------------------------------------------------
x=${y-新值}   |	 x=新值	      |	 x为空	    |	 x=$y
-----------------------------------------------------------
x=${y:-新值}  |	 x=新值	      |	 x=新值	    |	 x=$y
-----------------------------------------------------------
x=${y+新值}   |	 x为空	      |	 x=新值	    |	 x=新值
-----------------------------------------------------------
x=${y:+新值}  |	 x为空	      |	 x为空	    |	 x=新值
-----------------------------------------------------------		 
x=${y=新值}   |	 x=新值       |  x为空      |  	 x=$y
	      |	 y=新值       |  y值不变    |    y值不变
-----------------------------------------------------------
x=${y:新值}   |	 x=新值	      |  x=新值     |    x=$y	
	      |	 y=新值       |  y=新值     |    y值不变
-----------------------------------------------------------
x=${y?新值}   | 新值输出到标准| x为空	    |	x=$y
	      |	错误输出(屏幕)|		    |
-----------------------------------------------------------
x=${y:?新值}  | 新值输出到标准| 新值输出到  |	x=$y
	      |	错误输出      | 标准错误输出|
-----------------------------------------------------------

#########环境变量配置文件###########
source 配置文件 或者 . 配置文件 （让配置文件直接生效）
环境变量文件
/etc/profile
/etc/profile.d/*.sh
~/.bash_profile	---|各个用户的家目录只对
~/.bashrc	---|这个用户有效
/etc/bashrc

/etc/profile------>~/bash_profile----------->/etc/bashrc------->命令提示符
   |						  |	
   |						  |	
   |						  |---------------定义的noligin shell (不输入用户名密码，在shell用用bash csh切换的情况)
   |----> /etc/profile.d/*.sh----------------------				
		  |
		  |
	     /etc/profile.d/lang.sh--------->/etc/syscconfig/I18n
	


##############正则表达式#########################
正则匹配符合条件的字符串，正则是包含匹配，例如 grep awk sed可以支持正则表达式
通配符是匹配符合条件的文件名，是完全匹配。例如ls find cp不支持正则，所以只能使用shell自己的通配符来匹配。
基础正则表达式
grep "^$" filename (匹配空白行)

####结束多个进程
ps aux | grep  '/home/apache/www/import/wms/auto/shipBatchSubmitCheck.php' | grep -v grep | awk '{print $2}'|xargs kill -9 

<<<<<<< HEAD
####获取公网ip
curl ifconfig.me
或者 http://members.3322.org/dyndns/getip



#############cut字段提取命令###################
cut [选项] 文件名
选项
-f 列号 提取第几列
-d 分隔符 安装指定分隔符分割列
例如 cut -d ":" -f 1,3 /etc/passwd
cut 如果是空格作为分隔符，就不能有效的识别，要用awk
##########printf命令##########################
printf '输出类型输出格式' 输出内容
输出类型：
%ns 输出字符串，你是数字指定输出几个字符
%ni 输出整数，n是数字指定输出几个数字
%m.nf 输出浮点数，m和n是数字，值代输出的整数位数和小数位数
输出格式
\a 输出警告声音
\b 输出退格键
\f 清除屏幕
\n 换行
\r 回车
\t 水平输出退格键 即 TAB
\v 垂直输入退格键
=======
#############cut字段提取命令###################
cut [选项] 文件名
选项
-f 列号 	提取第几列
-d 分隔符 	安装指定分隔符分割列

例如 cut -d ":" -f 1,3 /etc/passwd
cut 如果是空格作为分隔符，就不能有效的识别，要用awk

##########printf命令##########################
printf '输出类型输出格式' 输出内容
输出类型：
%ns	输出字符串，你是数字指定输出几个字符
%ni	输出整数，n是数字指定输出几个数字
%m.nf	输出浮点数，m和n是数字，值代输出的整数位数和小数位数

输出格式
\a	输出警告声音
\b	输出退格键
\f	清除屏幕
\n	换行
\r	回车
\t	水平输出退格键 即 TAB
\v	垂直输入退格键	
>>>>>>> ccf203ceec1eb9060a07fdb08443726ea8613c04
例如
printf %s 1 2 3 4 5 6
输出 123456 （将1 2 3 4 5 6当成一个字符）
printf %s %s %s 1 2 3 4 5 6
%s%s123456
此时要加上引号
printf '%s %s %s' 1 2 3 4 5 6 (写多少个%s就表示多少个为一组，此处写三个表示三个字符为一组)
1 2 34 5 6
printf '%s %s %s\n' 1 2 3 4 5 6
1 2 3
4 5 6
<<<<<<< HEAD
printf 只接收以下情况
printf '%s' $(cat student)
####结束多个进程
ps aux | grep '/home/apache/www/import/wms/auto/shipBatchSubmitCheck.php' | grep -v grep | awk '{print $2}'|xargs kill -9
####获取公网ip
curl ifconfig.me
或者 http://members.3322.org/dyndns/getip
=======

printf 只接收以下情况
printf '%s' $(cat student)


####结束多个进程
ps aux | grep  '/home/apache/www/import/wms/auto/shipBatchSubmitCheck.php' | grep -v grep | awk '{print $2}'|xargs kill -9 

####获取公网ip
curl ifconfig.me
或者 http://members.3322.org/dyndns/getip



###########awk命令############
awk标准输出就是printf
awk截取符合条件的列
awk '条件1{动作1}条件2{动作2}'
ps aux |grep apache|awk '{printf $2"\t"$10"\n"}'
awk 'BEGIN{print '读取数据前先输出数据'} {print $2}'

awk [-F  field-separator]  'commands'  input-file(s)

last -n 5 | awk  '{print $1}'

awk工作流程是这样的：读入有'\n'换行符分割的一条记录，
然后将记录按指定的域分隔符划分域，填充域，
$0则表示所有域,$1表示第一个域,$n表示第n个域。
默认域分隔符是"空白键" 或 "[tab]键",所以$1表示登录用户，$3表示登录用户ip,以此类推。


cat /etc/passwd |awk  -F ':'  '{print $1"\t"$7}'
root    /bin/bash
daemon  /bin/sh


如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加"blue,/bin/nosh"

cat /etc/passwd |awk  -F ':'  'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}'
name,shell
root,/bin/bash
daemon,/bin/sh
bin,/bin/sh
sys,/bin/sh
....
blue,/bin/nosh


awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，
然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,
随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。







######################sed的作用###################
sed的作用
sed几乎支持所有linux平台的流编辑器，sed主要对数据进行选取、替换、修改、删除
sed 选项 '动作' 文件名
选项有
-n 只会把经过sed命令处理的行输出到屏幕
-e 允许对sed命令进行多条sed命令处理
-i 用sed修改结果直接修改读取的数据文件，而不是输出到屏幕
动作有
a\ 在当前行后追加一行或者多行
c\
i\ 在当前数据行前添加一行或者多行
d 删除指定的行
p 打印指定的行
s 字符替换
例如
sed -n ‘2p’ student.txt 输出第二行
sed ‘2,4d’ student.txt 删除第二行到第四行
sed ‘2a 第二行后追加内容’ file.txt
sed ‘2i 第二行前插入’ file.txt
sed ‘3s/替换前数据/替换后数据/g’ file.txt
####################sort的作用#################
sort 选项 文件名 （排序）
-f 忽略大小写
-n 以数值进行排序
-r 反向排序
-t 指定分隔符，默认分隔符是制表符
-k n[,m] 指定字段范围排序从n开始m结束
例如
sort -t ‘:’ -k 3,3 /otc/passwd
t    /bin/bash
daemon  /bin/sh
bin     /bin/sh
sys     /bin/sh
加上-n字符串
################条件判断式####################
b 判断文件是否存在，并且是块文件
c 判断文件是否存在，并且是字符文件
d 判断文件是否存在并且是目录
e 判断文件是否存在
f 判断文件是否存在并且是普通文件
L 判断文件是否存在并且是符号链接文件
p 判断文件是否存在并且是管道文件
s 判断文件是否存在，并且是否为空
S 判断文件是否存在并且是套接字文件
-n    只会把经过sed命令处理的行输出到屏幕
-e    允许对sed命令进行多条sed命令处理
-i    用sed修改结果直接修改读取的数据文件，而不是输出到屏幕


####################sort的作用#################
sort 选项 文件名  （排序）
-f    忽略大小写
-n    以数值进行排序
-r    反向排序
-t     指定分隔符，默认分隔符是制表符
-k n[,m]    指定字段范围排序从n开始m结束
例如
sort -t ‘:’ -k 3,3 /etc/passwd
加上-n字符串



################条件判断式####################
b    判断文件是否存在，并且是块文件
c    判断文件是否存在，并且是字符文件
d    判断文件是否存在并且是目录
e    判断文件是否存在
f    判断文件是否存在并且是普通文件
L    判断文件是否存在并且是符号链接文件
p    判断文件是否存在并且是管道文件
s    判断文件是否存在，并且是否为空
S    判断文件是否存在并且是套接字文件
有两种判断方式
test -e filename
[-e filename]
安装文件权限判断
-r 判断文件是否存在，并且有读权限
-w 判断文件是否存在，并且有写权限
-x 判断文件是否存在，并且有执行权限
-u 判断文件是否存在，并且有suid权限
-g 判断文件是否存在并且有sgid权限
-k 判断文件是否存在，并且有sbit权限
两个文件比较
文件1 -nt 文件2 判断文件1修改时间比文件2的修改时间新
文件1 -ot 文件2 判断文件1的修改时间比文件2旧
文件1 -ef 文件2 判断文件1和文件2的inode是否一样，这是判断硬链接的好方法
两个数值之间的比较
eq gt lt ge le
两个字符串比较
z 字符串 判断字符串是否为空
n 字符串 判断字符串是否为非空
字串1== 字符1和字符2是否相等
字串1!= 字符1和字符2是否不等
多重判断
判断式1 -a 判断式2 逻辑与
判断式1 -o 判断式2 逻辑或
!判断式 取反
-r    判断文件是否存在，并且有读权限
-w    判断文件是否存在，并且有写权限
-x    判断文件是否存在，并且有执行权限
-u    判断文件是否存在，并且有suid权限
-g    判断文件是否存在并且有sgid权限
-k     判断文件是否存在，并且有sbit权限

两个文件比较
文件1 -nt 文件2    判断文件1修改时间比文件2的修改时间新
文件1 -ot 文件2    判断文件1的修改时间比文件2旧
文件1 -ef 文件2    判断文件1和文件2的inode是否一样，这是判断硬链接的好方法
两个数值之间的比较
eq gt lt ge le
两个字符串比较
z 字符串     判断字符串是否为空
n 字符串     判断字符串是否为非空
字串1==      字符1和字符2是否相等
字串1!=      字符1和字符2是否不等

多重判断
判断式1 -a 判断式2    逻辑与
判断式1 -o 判断式2     逻辑或
!判断式       取反



################流程控制#############################
用法1
if [ 条件判断式 ];then
程序
fi
用法2
if [ 条件判断式 ]
then
程序
fi
多分支
if [ 条件判断式 ]
then
条件成立时程序
else
条件不成立时程序
fi
nmap -sT ip
多分支if语句
if [ 条件判断式1 ]
then
执行条件1满足程序
elif [ 条件判断式2 ]
then
执行条件2满足程序
……更多的判断
else
所有条件不满足时执行
fi
    then
          程序
fi

多分支
if [ 条件判断式 ]
   then
        条件成立时程序
     else
         条件不成立时程序
fi

nmap -sT ip 

多分支if语句
if [ 条件判断式1 ]
    then
        执行条件1满足程序
elif [ 条件判断式2 ]
     then
         执行条件2满足程序
……更多的判断
else
    所有条件不满足时执行
fi

#####case使用方法####
case只能判断一个条件语句，if elif可以判断多种判断语句
##用法
case $变量 in
“值1”)
变量值为值1,执行程序1
;;
“值2”)
变量值为值2,执行程序2
;;
…省略其他分支
*)
变量量不是以上值，执行比程序
;;
esac
#####for循环的使用#####
使用方法1(是先不知道循环次数)
for 变量in 值1 值2 值3
do
程序
done
使用方法2(是先知道循环次数)
for (( 初始值;循环控制条件;变量变化 ))
do
执行程序
done
#####################while用法#####################
while [ 条件判断式 ]
do
程序
done
=======
         变量值为值1,执行程序1
;;
“值2”)
         变量值为值2,执行程序2
;;
…省略其他分支
*)
     变量量不是以上值，执行比程序
;;
esac

#####for循环的使用#####
使用方法1(是先不知道循环次数)
for 变量in 值1 值2 值3
    do
         程序
     done
使用方法2(是先知道循环次数)
for (( 初始值;循环控制条件;变量变化 ))
   do
         执行程序
    done


#####################while用法#####################
while [ 条件判断式 ]
    do
         程序
     done
#####until用法####
until条件式不成立继续循环，成立终止循环
用法为
until [ 条件判断式 ]
do
程序
done
#############服务与自启动###########################
chkconfig --list
查看服务自启动状态，可以查看所有rpm安装的
启动脚本位置
/etc/init.d 启动脚本位置
/etc/sysconfig 初始化环境配置文件
/etc 配置文件位置
/etc/xinetd.conf xinetd配置文件
/etc/xinetd.d 基于xinetd服务的启动脚本
/var/lib 服务产生数据放置位置
/var/log 日志
service --status-all 查看所有服务的状态
设置自启动
chkconfig -level 2345 http on
修改/etc/rc.d/rc.local文件
ntsysv
    do
         程序
     done

#############服务与自启动###########################
chkconfig --list 
查看服务自启动状态，可以查看所有rpm安装的
启动脚本位置
/etc/init.d                 启动脚本位置
/etc/sysconfig	            初始化环境配置文件
/etc                        配置文件位置            
/etc/xinetd.conf   	    xinetd配置文件
/etc/xinetd.d               基于xinetd服务的启动脚本
/var/lib                    服务产生数据放置位置
/var/log                    日志
service --status-all   	    查看所有服务的状态
设置自启动
chkconfig -level 2345 http on
修改/etc/rc.d/rc.local文件
ntsysv     
让源码包安装的脚本被service识别的方法可以把源码包安装的脚本加入到/etc/init.d下做软链接就可以了
用法为
ln -s /usr/local/src/apache2/bin/apachectl /usr/init.d/apache
如果想让源码包被chkconfig和ntsysv识别则可以修改apache加入如下
#chkconfig * * *(三个数字，)
然后用chkconfig --add apache

################进程管理###############
kill -l (查看可用的进程号)

常用信号
1	SIGHUP		该信号进程立即关闭，然后重新读取配置文件之后重启


############进程管理#####################


9	SIGKILL		用于立即结束程序的运行，强制终止

15	SIGTERM		正常终止

pstree

killall 进程名
例如 
killall http

pkill -9 http

################工作管理################
bg %工作号 （把后台暂停的工作回复到后台执行）
注意 后台回复执行的命令，是不能和前台有交互的，否则不能恢复到后台执行

fg 恢复前台

##############系统资源查看##############
vmstat [刷新延迟 刷新次数]

procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0      0  98344  16864  98696    0    0    17     4  351   16  0  1 98  1  0
		|							|
		|							|
	     内存空闲						     cpu空闲

好了，命令介绍完毕，现在开始实战讲解每个参数的意思。

r 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，
当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，
超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。
如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。

b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。

swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，
那么你该升级内存了或者把耗内存的任务迁移到其他机器。

free   空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。

buff   Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M

cache cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，
把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，
当程序使用内存时，buffer/cached会很快地被使用。)

si  每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，
要查找耗内存进程解决掉。我的机器内存充裕，一切正常。

so  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。

bi  块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，
默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，
但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒

bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，
需要调整。

in 每秒CPU的中断次数，包括时间中断

cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，
这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，
我们一般做性能测试时会进行几千并发甚至几万并发的测试，
选择web服务器的进程可以由进程或者线程的峰值一直下调，
压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。
系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，
这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，
导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。

us 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。

sy 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。

id  空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。

wt 等待IO CPU时间。



dmesg 开机时内核检测信息 (硬件信息)
dmesg | grep CPU

free 查看内存使用状况
free的选项有
-b	以字节为单位显示
-k	以kb为单位显示，默认为kb显示
-m	以MB为单位显示
-g	以GB为单位显示

             total       used       free     shared    buffers     cached
Mem:           304        298          6          0         30        155
-/+ buffers/cache:        112        192
Swap:         1023          0       1023

里面used包含linux使用和buffers和cached使用的
例如此例子 298-30-155才是linux占用的内存
其实空余内存是free+buffers+cached

缓存和缓冲的区别
简单说缓存(cache)是用来加速数据从硬盘读取的，
而缓冲(buffer)是用来加速数据写入硬盘的

cat /proc/cpuinfo
cpu 信息

##显示系统启动时间和平均负载，也就是top命令的第一行，w命令饿可以看到这个数据
uptime


uptime

		
##查看系统与内核相关信息###
uname [选项]
选项
-a	查看系统所有相关的信息
-r	查看内核版本
-s	查看内核名称

###判断当前系统的位数
file /bin/ls

###查询当前linux系统的发行版本
lsb_release -a

###列出进程打开或使用的文件信息
lsof [选项]
选项
-c 字符串：	只列出字符串开头的进程打开的文件
-u 用户名：	只列出某个用户的进程打开的文件
-p pid：	列出某个pid进程打开的文件

###################定时任务#########
分　时　日　月　周　命令 
* * * * * command
项目		含义
第一个*		一个小时当中的第几分钟
第二个*		一天当中的第几个小时
第三个*		一月当中的第几天
第四个*		一年当中的第几个月
第五个*		一周当中的星期几（0和7都代表星期日）

例如
0 0 1,15 * 1 （每月1号，15号，每周1的0点0分）
在crontab中要使用日期要加上\转义，因为crontab中%有特殊含义
例如
date=$(date +\%y\%m\%d)

修改日期用
date -s 日期

############日志管理######################
rsyslogd取代了syslog并且和syslog兼容

常见日志的作用
日志文件		说明
/var/log/cron		记录了系统定时任务想挂面的日志	
/var/log/cups/		记录打印信息的日志
/var/log/dmesg		记录了系统在开机时内核自检的信息，也可以用dmesg命令查看
/var/log/btmp		记录错误登陆日志，这个是二进制文件，要用lastb查看，
/var/log/lastlog	记录系统中所有用户最后一次登陆时间的日志。
/var/log/maillog	记录邮件信息
/var/log/message	记录系统重要信息的日志，这个日志文件记录linux绝大多数重要信息
/var/log/secure		记录验证和授权方面的信息
/var/log/wtmp		永久记录所有用户登陆，注销信息，二进制文件不能用vi，用last命令查看
/var/run/utmp		记录当前已经登陆用户信息。这个文件会随着用户登陆和注销而不断变化，同样不能用vi，而用w，who，users命令查询

####rsyslogd日志服务######
/etc/rsyslog.conf配置文件

authpriv.*		/var/log/secure
##authpriv(服务名称).(连接符号)*(日志等级) 日志记录位置
##认证相关服务，所有日志等级 记录在/var/log/secure日志中

##常见的服务名称

服务名称		说明
auth			安全和认证相关信息
authpriv		安全和认证相关信息
cron			定时任务和at产生日志
daemon			ftp守护进程产生的日志
ftp			内核产生的日志
kern			为本地使用预留的服务
local10-local7		打印产生的日志
mail			邮件收发信息
news			与新闻服务器相关的日志
syslog			syslogd服务产生的日志信息
user			用户等级类别的日志信息
uucp			


##连接符有
"."代表只要比后面的等级高都记录。例如cron.info代码只要cron服务日志只要大于等于info级别就记录
".="只记录所需等级的日志
".!"代表不等于，就是除了该等级的日志外，其他等级日志都记录


###日志等级
等级名称		说明
debug			一般的调试信息说明
info			基本的通知信息
notice			普通的信息，有一定的重要性
warning			警告信息
err			错误信息
crit			临界状况信息，比err等级还严重
alert			警告信息，比crit还严重，必须立即采取行动
emerg			疼痛等级，熊已经无法使用了

#############日志轮替##############
logrotate配置文件 （位置为/etc/logrotate.conf）
参数				参数说明
daily				日志轮替周期是每天
weekly				日志轮替周期是每周
monthly				日志轮替的周期是每月
rotate 数字			保留日志文件的个数。0值没有备份
compress			日志轮替是，就得日志进行压缩
create mode owner group		建立新日志，同时制定新日志的权限与所有者和所属组
mail address			日志轮替时，输出内容通过邮件发送到指定的邮件地址			
missingok			日志不存在，忽略该日志警告信息
notifempty			日志为空文件，则不镜像日志轮替
minsize 大小			日志轮替的最小值，就是日志一定要达到这个最小值才能轮替
size 大小			日志只有大于指定大小才进行日志轮替
dateext				使用日期作为日志轮替文件的后缀

把源码安装的apache日志加入到轮替
/usr/local/apache2/logs/access_log{
daily
create
rotate 30
}

logrotate 命令
logrotate [选项] 配置文件名
选项
-v	显示日志轮替过程
-f	强制进行日志轮替。强制配置文件所有日志进行轮替



############运行级别################
0	关机
1	单用户模式，相当于window安全模式，用户系统修复
2	不完全命令模式，不含NFS()服务
3	完全命令模式，就是标准的字符界面
4	系统保留
5	图形模式
6	重启动
使用runlevel来查看运行级别
N 3
第一个表示上一个级别，第二个表示现在的级别，其中N表示开机直接进入3级别
修改开机进入的级别编辑/etc/inittab这个文件的id:3:initdefault:数字

#####启动过程#############
		   单系统直接启动--->加载内核-------------------------
			      |					     |-----------
bios--->MBR--->MBR启动引导程序|(grub)				     |		|
			    多系统--->调用其它分区启动--->加载内核-----		|
										|
载真正系<--加载驱动<--建立仿真<--找到initramfs<--搜索---内核解压并自检----------
统根目录		根目录
   |			|---------->/ect/rc.d/rc.sysinit----->系统初始化
   |			|
/sbin/init--->/etc/init/rcs.conf
			|
			|------>/etc/inittab------>/etc/init/rc.conf----->/etc/rc.d/rc
										|
										|
	进入系统 <---登陆界面<---/etc/rc.d/rc.local<---按照优先级启动<--/etc/rc[0-6].d
							和关闭相应脚本	
#################grub##################
grub的配置文件在/boot/grub/grub.conf(和启动相关的文件都在boot分区中)
grub配置文件
default=0	默认启动第一个系统
timeout=5	等待时间，默认是5秒
splashimage=(hd0,0)/grub/splash.xpm.gz
这里是指定grub启动时的背景图像文件的保存位置
hiddenmenu	隐藏菜单
title CentOS (2.6.18-194.el5)	启动时候显示的内容
	root (hd0,0)	第一个分区
	kernel		加载内核
	initrd		加载模拟目录

如果要安装两个操作系统，要先安装window，再安装linux
因为window启动不识别linux，但是linux可以识别windows，所以安装window后
linux的grub可以识别windows并且把window的启动加入到grub中

#########grub加密与字符界面分辨率###########
grub加密
grub-md5-crypt
在hiddenmenu之前加入
password --md5 MD5加密的字符串
示例如下
default=0
timeout=5
password --md5 用grub-md5-crypt输入密码生成的字符串
splashimage=(hd0,0)/grub/splash.xpm.gz
hiddenmenu

#####系统的修复模式##########





###备份恢复########
dump 
restore

查看dump是否安装
rpm -qa|grep dump

dump的用法

dump [选项] 备份之后的文件名 原文件或许路径
-level 即是0-9级别
-f 文件名就是指定备份的文件名
-u 备份成功后将备份时间写到/etc/dumptables
-v 显示备份更多的输入输出
-j 调用bzlib库压缩备份文件，其实就是把备份文件压缩成bz2
-w 显示允许被dump的分区的备份登记及备份时间

###备份分区
dump -0uj -f /root/boot.bak.bz2 /boot/
##备份命令，先执行一次完全备份，并压缩和更新备份时间
dump -1uj -f /root/boot.bak.bz2 /boot/
##增量备份/boot/分区，并压缩
dump -W
#查询分区的备份时间及备份级别

###restore命令
restore [模式选项][选项]
##模式选项 restore常用模式有以下四种，这四个模式不能混用
-C 比较备份数据和实际数据的变化
-i 进入交互模式，手工选择需要恢复的文件
-t 查看模式，用于查看备份文件拥有哪些数据
-r 还原模式，用于数据还原
##选项
-f 指定备份文件的文件名
 

####隔断时间运行一次命令用watch
一秒运行一次
watch -n 1 'ps aux|grep '/var/www/html/import/wms/auto/shipBatchSubmit.php'|grep -v grep'


运行shell脚本时候出现
bad interpreter: No such file or directory
因为是在window下编写的shell所以要将window下转成linux可以使用doc2unix或者在vi下面用
:set ff=unix 或 :set fileformat=unix




范例一：将整个 /etc 目录下的文件全部打包成为 /tmp/etc.tar
[root@linux ~]# tar -cvf /tmp/etc.tar /etc <==仅打包，不压缩！
[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc <==打包后，以 gzip 压缩
[root@linux ~]# tar -jcvf /tmp/etc.tar.bz2 /etc <==打包后，以 bzip2 压缩
# 特别注意，在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。
# 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar file ～
# 如果加 j 参数，则以 .tar.bz2 来作为附档名啊～
# 上述指令在执行的时候，会显示一个警告讯息：
# 『tar: Removing leading `/” from member names』那是关於绝对路径的特殊设定。


 lsof -i:22
 







ps aux | sort -k4nr | head -n 5

查看占用CPU最高的5个进程
	
ps aux | sort -k3nr | head -n 5

netstat -an|awk '/tcp/ {print $6}'|sort|uniq -c

ps -ef|grep httpd|wc -l

netstat -nat|grep -i "80"|wc -l

netstat -an | grep ESTABLISHED | wc -l

netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'
返回
TIME_WAIT 53
ESTABLISHED 20

用top查看cpu过高的pid例如27427
然后用下面命令查看27427是哪个进程
ps aux | grep 27427



strace -p 27427 -o /home/william/strace.txt

 find / -path /var/log/httpd -type f -name "*.*" | xargs grep "114.112.86.100"

dmidecode -t system

tcpdump -i eth1 host 120.24.52.244 and 114.112.86.100

dmesg |grep -i Ethe

egrep -v "^$|^;" /etc/php.ini|less

cat httpd.conf | egrep -v "^$| #|^#" |less

ls | grep *.bak

getenforce


##sync;sync;reboot
sync
在Linux系统中，当数据需要存入磁盘时，通常会先放到缓冲区内，等到适当的时刻再写入磁盘，如此可提高系统的执行效率。

echo $PATH|cut -d ':' -f 5;


不记录history
export HISTCONTROL=ignorespace
然后你输入的命令前加个空格，就会被history过滤。
ignoredups 表示去除重复
ignoreboth:空格开头和重复的都忽略
详情见 http://www.educity.cn/it/1635982.html


scp
远程到本地
scp -r /home/ root@120.24.90.64:/home/export.sql.tar.gz

远程到本地
scp -r  root@120.24.52.244:"/home/import_wms0720-s.sql" /home

本地复制到远程
scp abc.zip root@remote_server:/home/root/abc.zip



   tar -zcvf /tmp/etc.tar.gz /etc <==打包后，以 gzip 压缩

 scp local_file remote_username@remote_ip:remote_folder 
 
scp local_file remote_username@remote_ip:remote_file 


###route用法
route命令用于显示和操作IP路由表。要实现两个不同的子网之间的通信，
需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现



Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0
192.168.25.0    0.0.0.0         255.255.255.0   U     0      0        0 eth0
169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0
0.0.0.0         192.168.25.11   0.0.0.0         UG    0      0        0 eth0

192.168.0.0~192.168.0.255这个ip网段可分为Net_ID与Host_ID,Net_ID是不可变的，就是占用的bit用光（全为1）
Host_ID可变，就将他想成保留在（全为0）

netmask 255.255.255.0 网域定义最重要参数
network 192.168.0.0 第一个ip
broadcast 192.168.0.255 最后一个ip
可以设定成主机的ip
192.168.0.1~192.168.0.254
第一个ip：     11000000.10101000.00000000.00000000
最后一个ip  11000000.10101000.00000000.11111111
			|---------Net_ID---------|--host--|
			11111111.11111111.11111111.0000000 netmask 二进制
			255 .     255    .  255  .  0
class A 255.0.0.0
Class B 255.255.0.0
Class C	255.255.255.0

172.16.0.0 23位 Net_ID

将IP地址与掩码地址做与运算，得到的就是网络地址

CIDR的介绍：
就是将Net_ID分出一部分作为Host_ID
CIDR（Classless Inter-Domain Routing，无类域间路由选择）它消除了传统的A类
、B类和C类地址以及划分子网的概念，因而可以更加有效地分配IPv4的地址空间。
它可以将好几个IP网络结合在一起，使用一种无类别的域际路由选择算法，
使它们合并成一条路由从而较少路由表中的路由条目减轻Internet路由器的负担




network的host位全是0
broadcast的host全为1
10101100.00010000.0000000 0.0000000  network 172.16.0.0 
10101100.00010000.0000000 1.11111111 broadcast 172.16.1.255 （）
11111111.11111111.1111111 0.00000000 netmask 255.255.254.0
知道network 和netmask就可以算出broadcast 因此常用network以及netmask表示网域			

比如讲classC 镜像子域切分，以192.168.0.0~192.168.0.255，将他们分成两个子域

#Destination 指Network的意思
#Gateway 指改接口的gatwayip，若为 0.0.0.0表示不需要额外的ip
#Genmask 指netmask（子网掩码，与Destination组成一部主机或网域）
#Flags 共有多个旗帜来表示改网域或者主机代表
		U代表该路由可用
		G代表该网域需要经由Gateway来帮忙转递
		H 代表改行路由为一部主机，而非一整个网域
	Iface 就是interface接口意思
	
##查询my.cnf文件
whereis my.cnf
mysql --help | grep my.cnf	
		
		















