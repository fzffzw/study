p50
而 RJ-45 接头又因为每条蕊线的对应不同而分为 568A 与 568B 接头，这两款接头内的蕊线对应如下表：

接头名称\蕊线顺序	1		2		3		4	5		6	7		8
568A				白绿		绿		白橙		蓝	白蓝		橙	白棕		棕
568B				白橙		橙		白绿		蓝	白蓝		绿	白棕		棕

跳线：一边为 568A 一边为 568B 的接头时称为跳线，用在直接链接两部主机的网络卡。
并行线：两边接头同为 568A 或同为 568B 时称为并行线，用在链接主机网络卡与集线器之间的线材；

2.2.3 以太网络的传输协议：CSMA/CD
CSMA/CD (Carrier Sense Multiple Access with Collision Detection)

集线器是一种网络共享媒体，什么是网络共享媒体啊？想象一下上述的环境就像一个十字路口，而集线器就是那个路口！
 这个路口一次只允许一辆车通过，如果两辆车同时使用这个路口，那么就会发生碰撞的车祸事件啊！
 那就是所谓的共享媒体。 也就是说，网络共享媒体在单一时间点内， 仅能被一部主机所使用。
 
 
 理解了共享媒体的意义后，再来，我们就得要讨论，那么以太网络的网卡之间是如何传输的呢？
 我们以上图中的 A 要发给 D 网卡为例好了，简单的说， CSMA/CD 搭配上述的环境，它的传输情况需要有以下的流程：

监听媒体使用情况 (Carrier Sense)：
A 主机要发送网络封包前，需要先对网络媒体进行监听，确认没有人在使用后， 才能够发送出讯框；

多点传输 (Multiple Access)：
A 主机所送出的数据会被集线器复制一份，然后传送给所有连接到此集线器的主机！ 也就是说， A 所送出的数据，
 B, C, D 三部计算机都能够接收的到！但由于目标是 D 主机，因此 B 与 C 会将此讯框数据丢弃，而 D 则会抓下来处理；

碰撞侦测 (Collision Detection)：
该讯框数据附有检测能力，若其他主机例如 B 计算机也刚好在同时间发送讯框数据时， 
那么 A 与 B 送出的数据碰撞在一块 (出车祸) ，此时这些讯框就是损毁，那么 A 与 B 就会各自随机等待一个时间，
 然后重新透过第一步再传送一次该讯框数据。
 

p53
2.2.4 MAC 的封装格式


4 bits	4 bits	8 bits	3 bits	13 bits
Version	IHL	Type of Service	Total Length
Identification	Flags	Fragmentation Offset
Time To Live	Protocol	Header Checksum
Source Address
Destination Address
Options	Padding
Data


Version(版本)
宣告这个 IP 封包的版本，例如目前惯用的还是 IPv4 这个版本就在这里宣告。

IHL(Internet Header Length, IP表头的长度)
告知这个 IP 封包的表头长度，使用的单位应该是字组 (word) ，一个字组为 4bytes 大小喔。

Type of Service(服务类型)
这个项目的内容为『PPPDTRUU』，表示这个 IP 封包的服务类型，主要分为：
PPP：表示此 IP 封包的优先度，目前很少使用；
D：若为 0 表示一般延迟(delay)，若为 1 表示为低延迟；
T：若为 0 表示为一般传输量 (throughput)，若为 1 表示为高传输量；
R：若为 0 表示为一般可靠度(reliability)，若为 1 表示高可靠度。
UU：保留尚未被使用。
举例来说，gigabit 以太网络的种种相关规格可以让这个 IP 封包加速且降低延迟，某些特殊的标志就是在这里说明的。

Total Length(总长度)
指这个 IP 封包的总容量，包括表头与内容 (Data) 部分。最大可达 65535 bytes。

Identification(辨别码)
我们前面提到 IP 袋子必须要放在 MAC 袋子当中。不过，如果 IP 袋子太大的话，就得先要将 IP 再重组成较小的袋子然后再放到 MAC 当中。而当 IP 被重组时，每个来自同一个 IP 的小袋子就得要有个标识符以告知接收端这些小袋子其实是来自同一个 IP 封包才行。 也就是说，假如 IP 封包其实是 65536 那么大 (前一个 Total Length 有规定)， 那么这个 IP 就得要再被分成更小的 IP 分段后才能塞进 MAC 讯框中。那么每个小 IP 分段是否来自同一个 IP 资料，呵呵！那就是这个标识符的功用啦！

Flags(特殊旗标)
这个地方的内容为『0DM』，其意义为：
D：若为 0 表示可以分段，若为 1 表示不可分段
M：若为 0 表示此 IP 为最后分段，若为 1 表示非最后分段。

Fragment Offset(分段偏移)
表示目前这个 IP 分段在原始的 IP 封包中所占的位置。就有点像是序号啦，有这个序号才能将所有的小 IP 分段组合成为原本的 IP 封包大小嘛！透过 Total Length, Identification, Flags 以及这个 Fragment Offset 就能够将小 IP 分段在收受端组合起来啰！

Time To Live(TTL, 存活时间)
表示这个 IP 封包的存活时间，范围为 0-255。当这个 IP 封包通过一个路由器时， TTL 就会减一，当 TTL 为 0 时，这个封包将会被直接丢弃。说实在的，要让 IP 封包通过 255 个路由器，还挺难的～ ^_^

Protocol Number(协定代码)
来自传输层与网络层本身的其他数据都是放置在 IP 封包当中的，我们可以在 IP 表头记载这个 IP 封包内的资料是啥， 在这个字段就是记载每种数据封包的内容啦！在这个字段记载的代码与相关的封包协议名称如下所示：




p75
ICMP全名为(INTERNET CONTROL MESSAGE PROTOCOL)网络控制消息协议

ip与mac：链接层的arp与rarp协议

arp -[nd] hostname
-n 将主机名以ip形态显示
-d 设定某个ip或者hostname的MAC到ARP table当中

arp -n
Address                  HWtype  HWaddress           Flags Mask            Iface
192.168.206.1            ether   00:50:56:C0:00:08   C                     eth0

2.3.8 ICMP 协定
ICMP 的全名是『 Internet Control Message Protocol, 因特网讯息控制协议 』

类别代号 		类别名称与意义 
0 			Echo Reply (代表一个响应信息) 
3 			Destination Unreachable (表示目的地不可到达) 
4 			Source Quench (当 router 的负载过高时，此类别码可用来让发送端停止发送讯息) 
5 			Redirect (用来重新导向路由路径的信息) 
8			Echo Request (请求响应消息) 
11			Time Exceeded for a Datagram (当数据封包在某些路由传送的现象中造成逾时状态，此类别码可告知来源该封包已被忽略的讯息) 
12 			Parameter Problem on a Datagram (当一个 ICMP 封包重复之前的错误时，会回复来源主机关于参数错误的讯息) 
13			Timestamp Request (要求对方送出时间讯息，用以计算路由时间的差异，以满足同步性协议的要求) 
14 			Timestamp Reply (此讯息纯粹是响应 Timestamp Request 用的) 
15 			Information Request (在 RARP 协议应用之前，此讯息是用来在开机时取得网络信息) 
16 			Information Reply (用以响应 Infromation Request 讯息) 
17 			Address Mask Request (这讯息是用来查询子网 mask 设定信息) 
18			Address Mask Reply (响应子网 mask 查询讯息的)

ICMP 封包可以帮助联机的状态回报

##tcp 三次握手
第一次

第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；
SYN：同步序列编号（Synchronize Sequence Numbers）。
第二次

第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），
即SYN+ACK包，此时服务器进入SYN_RECV状态；
第三次

第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，
客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。
完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：

##UDP协议
user Datagram Protocol用户数据流协议。

##DNS
Domain Name System


192.168.0.128/29计算network netmask broadcast可用的ip
192.168.0.128的ip的二进制为
11000000.10101000.00000000.10000000
29为network 全为1表示不可用
11111111.11111111.11111111.11111 000
转为10进制所以broadcast为255.255.255.248
network为第一个ip 192.168.0.128
broadcast为最后一个ip 11000000.10101000.00000000.10000 111（后三位net_id可用全为1）十进制为192.168.0.135
可用ip为192.168.0.129 ~ 192.168.0.134 共 6 个可用的 IP

###192.168.100.0/24 这个 Class C 的网域分为 4 个子域
11000000.10101000.1100100.00000000 192.168.100.0/26,
11000000.10101000.1100100.01000000 192.168.100.64/26,
11000000.10101000.1100100.10000000 192.168.100.128/26,
11000000.10101000.1100100.11000000 192.168.100.192/26,

TCP 封包上面的 SYN 与 ACK 标志代表的意义为何？
SYN 代表该封包为该系列联机的第一个封包，亦即是主动联机的意思； ACK 则代表该封包为确认封包，亦即是回应封包！


###p111
该网络卡太新了，使得 Linux 核心来不及支持时，那么你就得要透过：
1. 重新编译较新的核心，或者是
2. 编译网络卡的核心模块

lspci | grep -i ethernet

lspci | grep -i ethernet

从刚刚的 dmesg 的输出讯息中，我们知道鸟哥这部主机所使用的模块是 e1000 ，
那核心有顺利的载入了吗？可以利用 lsmod 去查查看。
此外，这个模块的相关信息又是如何呢？使用 modinfo 来查查看吧！

lsmod命令用来列出当 前系统加载的模块,可以当作硬件模块浏览器

modinfo e1000

modprobe e1000
###启动或者是关闭某张网络接口
ifup eth0


dig baidu.com


GATEWAY：代表的是『整个主机系统的 default gateway』，
 所以，设定这个项目时，请特别留意！不要有重复设定的情况发生喔！
 也就是当你有 ifcfg-eth0, ifcfg-eth1.... 
 等多个档案，只要在其中一个档案设定 GATEWAY 即可
 
 
 lsusb
 
 lsusb命令是一个学习USB驱动开发，认识USB设备的助手，推荐大家使用，如果您的开发板中或者产品中没有lsusb命令可以自己移植一个
 
 ##安装驱动
 rpm -ivh kmod-rt3070sta* rt2870-firmware*
 
 iwconfig
 
 ##p147
 	ifconfig 查询的说明：
   eth0：就是网络卡的代号，也有 lo 这个 loopback ；
 HWaddr：就是网络卡的硬件地址，俗称的 MAC 是也；
 inet addr：IPv4 的 IP 地址，后续的 Bcast, Mask 分别代表的是 Broadcast 与 netmask 喔！
 inet6 addr：是 IPv6 的版本的 IP ，我们没有使用，所以略过；
 MTU：就是第二章谈到的 MTU 啊！
 RX：那一行代表的是网络由启动到目前为止的封包接收情况， packets 代表封包数、errors 代表封包发生错误的数量、 dropped 代表封包由于有问题而遭丢弃的数量等等
 TX：与 RX 相反，为网络由启动到目前为止的传送情况；
 collisions：代表封包碰撞的情况，如果发生太多次， 表示你的网络状况不太好；
 txqueuelen：代表用来传输数据的缓冲区的储存长度；
 RX bytes, TX bytes：总接收、发送字节总量

route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
120.24.52.0     0.0.0.0         255.255.252.0   U     0      0        0 eth1
10.169.120.0    0.0.0.0         255.255.248.0   U     0      0        0 eth0
169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0
169.254.0.0     0.0.0.0         255.255.0.0     U     1003   0        0 eth1
172.16.0.0      10.169.127.247  255.240.0.0     UG    0      0        0 eth0
100.64.0.0      10.169.127.247  255.192.0.0     UG    0      0        0 eth0
10.0.0.0        10.169.127.247  255.0.0.0       UG    0      0        0 eth0
0.0.0.0         120.24.55.247   0.0.0.0         UG    0      0        0 eth1

Destination,Genmaskf分别是network,netmask
Gateway该网域通过哪个gateway连接出去，如果是0.0.0.0表示路由通过本机传送
Flags 
U(route is up) 该路由是启动的
H(target is a host) 目标是一部主机而非网域
G(use gateway) 需要通过外部主机来传递封包
R(reinstate route for dynamic routing) 使用动态路由时，恢复路由信息旗标
D(dynamically installed by daemon or redirect)已经由服务或转port功能审定为动态路由
M(modified from routing daemon or redirect) 路由已经被修改了
!(reject route)这个路由将不会被接受（用来抵挡不安全的网域!）

#p153
关于装置接口（device）相关设定
ip -s link show (查询该装置相关的信息)
ip link set device 动作与参数
show 

#p159
[root@iZ947w2p3vbZ ~]# ping -c 2 -s 1000 -M do baidu.com
PING baidu.com (180.149.132.47) 1000(1028) bytes of data.
1008 bytes from 180.149.132.47: icmp_seq=1 ttl=50 time=37.0 ms
1008 bytes from 180.149.132.47: icmp_seq=2 ttl=50 time=36.6 ms

--- baidu.com ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1037ms
rtt min/avg/max/mdev = 36.637/36.854/37.071/0.217 ms

-s 发出icmp包大小
-M do|dont 
do 传递一个DF旗标，让封包不能重新拆包与打包
dont 不传递DF旗标，封包可以再其它主机拆包与打包

#p162
两主机间各节点分析
traceroute [选项] ip
-n 可以不必进行主机名称解析，单纯用ip，速度较快
-U 使用UDP的port 33434进行侦测，这是预设的侦测协议；
-I 使用ICMP的方式进行侦测
-T 使用TCP来进行侦测，一般使用port 80测试
-w 若对方主机在几秒钟没有回声就宣告不治，预设是5s
-p 端口 
-i 装置，用在比较复杂的环境，如果你的网络接口很多很复杂时，才会用到这个参数
如果有两个ADSL可以用-i 选择ppp0还是ppp1
-g 路由：与-i相似只是-g后面接的gateway的ip

netstat
-r 列出路由表等同于route
-n 不使用主机名与服务名称，使用ip和port number
-a 列出说有联机状态，包括tcp/udp/unix socket等
-t 仅列出TCP封包的联机
-u 列出UDP封包的联机
-I 仅列出在Listen（监听）的服务网络状态
-p 列出PID与program的档名
-c 可以设定几秒自动刷新一次，例如-c 5 表示5s更新一次网络状态

netstat -n
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address               Foreign Address             State 
tcp        0      0 120.24.52.244:80            117.79.131.67:30576         SYN_RECV   

Proto：协议

recv-Q 表示网络接收队列
表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走，recv()
如果接收队列Recv-Q一直处于阻塞状态，可能是遭受了拒绝服务 denial-of-service 攻击。

send-Q 表示网路发送队列
对方没有收到的数据或者说没有Ack的,还是本地缓冲区.
如果发送队列Send-Q不能很快的清零，可能是有应用向外发送数据包过快，或者是对方接收数据包不够快

CLOSED：无连接是活动的或正在进行
LISTEN：服务器在等待进入呼叫
SYN_RECV：一个连接请求已经到达，等待确认（接收一个要求联机主动联机的封包）
SYN_SENT：应用已经开始，打开一个连接（发送主动联机（syn标志）封包）
ESTABLISHED：正常数据传输状态（已经建立联机）
FIN_WAIT1：应用说它已经完成（该服务socket已经中断，该联机正在中断中）
FIN_WAIT2：另一边已同意释放（该联机已经挂断，正在等待对方主机响应断线确认的封包）
ITMED_WAIT：等待所有分组死掉
CLOSING：两边同时尝试关闭
TIME_WAIT：另一边已初始化一个释放（该联机已经挂断，但是socket还在网络等待结束）
LAST_ACK：等待所有分组死掉




