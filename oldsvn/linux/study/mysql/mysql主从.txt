http://blog.csdn.net/hguisu/article/details/7325124

1）复制概述
服务器将更新写入二进制日志文件，并维护文件的一个索引以跟踪日志循环。
这些日志可以记录发送到从服务器的更新。当一个从服务器连接主服务器时，
它通知主服务器从服务器在日志中读取的最后一次成功更新的位置。
从服务器接收从那时起发生的任何更新，然后封锁并等待主服务器通知新的更新

请注意当你进行复制时，所有对复制中的表的更新必须在主服务器上进行。
否则，你必须要小心，以避免用户对主服务器上的表进行的更新与对从服务器上的表所进行的更新之间的冲突。

1.1 mysql支持的复制类型：
（１）：基于语句的复制：  在主服务器上执行的SQL语句，
在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。  
            一旦发现没法精确复制时，   会自动选着基于行的复制。    
（２）：基于行的复制：把改变的内容复制过去，而不是把命令在从服务器上执行一遍. 从mysql5.0开始支持
（３）：混合类型的复制: 默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，
就会采用基于行的复制。

1.2 . 复制解决的问题

         MySQL复制技术有以下一些特点：
         (1)    数据分布 (Data distribution )
         (2)    负载平衡(load balancing)
         (3)    备份(Backups) 
         (4)    高可用性和容错行 High availability and failover 

1.3 复制如何工作 

        整体上来说，复制有3个步骤：   

   (1)    master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）；
   (2)    slave将master的binary log events拷贝到它的中继日志(relay log)；
   (3)    slave重做中继日志中的事件，将改变反映它自己的数据。

http://img.my.csdn.net/uploads/201202/28/0_1330439010P7lI.gif

该过程的第一部分就是master记录二进制日志。
在每个事务更新数据完成之前，master在二日志记录这些改变。
MySQL将事务串行的写入二进制日志，即使事务中的语句都是交叉执行的。
在事件写入二进制日志完成后，master通知存储引擎提交事务。


2.1、创建复制帐号

GRANT REPLICATION SLAVE,RELOAD,SUPER ON *.* 
TO backup@’10.100.0.200’ 
IDENTIFIED BY ‘1234’;

建立一个帐户backup，并且只能允许从10.100.0.200这个地址上来登陆，密码是1234。

(如果因为mysql版本新旧密码算法不同，可以设置：set password for 'backup'@'10.100.0.200'=old_password('1234')）


2.2、拷贝数据
假如是你完全新安装mysql主从服务器，这个一步就不需要。因为新安装的master和slave有相同的数据）

关停Master服务器，将Master中的数据拷贝到B服务器中，使得Master和slave中的数据同步，并且确保在全部设置操作结束前，
禁止在Master和slave服务器中进行写操作，使得两数据库中的数据一定要相同！

2.3、配置master

接下来对master进行配置，包括打开二进制日志，指定唯一的servr ID。例如，在配置文件加入如下值：

server-id=1
log-bin=mysql-bin

server-id：为主服务器A的ID值
log-bin：二进制变更日值

重启master，运行SHOW MASTER STATUS，输出如下：

2.4、配置slave
Slave的配置与master类似，你同样需要重启slave的MySQL。如下：
log_bin           = mysql-bin
server_id         = 2
relay_log         = mysql-relay-bin
log_slave_updates = 1
read_only         = 1
server_id是必须的，而且唯一。slave没有必要开启二进制日志，
但是在一些情况下，必须设置，例如，如果slave为其它slave的master，
必须设置bin_log。在这里，我们开启了二进制日志，
而且显示的命名(默认名称为hostname，但是，如果hostname改变则会出现问题)。
relay_log配置中继日志，
log_slave_updates表示slave将复制事件写进自己的二进制日志(后面会看到它的用处)。
有些人开启了slave的二进制日志，却没有设置log_slave_updates，
然后查看slave的数据是否改变，这是一种错误的配置。
所以，尽量使用read_only，它防止改变数据(除了特殊的线程)。
但是，read_only并是很实用，特别是那些需要在slave上创建表的应用。
