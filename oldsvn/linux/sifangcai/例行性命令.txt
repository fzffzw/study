建立 locate 的数据库：是否还记得为何使用 locate 这个指令时，搜寻速度超快！
那是因为 Linux 系统上将档案与路径都记录在数据库里面了！
所以使用 locate 的时候，嘿嘿！直接指向数据库去 ( /var/lib/slocate/slocate.db ) ，
偏偏麻烦的是这个档案的更新是每天一次！所以当你今天更新的档案，
使用 locate 反而可能会找不到.... 

at命令要启动服务
如果是在 Red Hat 系统下，可以使用：
   1. ntsysv
   2. 选择 atd
   3. 按下 OK ！ 

如果是在 Mandrake 系统下，可以使用：

   1. chkconfig --add atd
   2. chkconfig --list
      上面这个指令可以查看 atd 在 run-level 正确的情况中，是否会在开机的时候被启动！

下达 at 这个动作会将工作排程写入 /var/spool/at  这个目录下呢！
然后等待系统将之执行啰！此外，这个 at 指令虽然预设是所有人都能进行，
但是可以经由 root 的规范来限制使用的人口。
限制的方法其实与 /etc/hosts.allow(deny) 类似，
使用 /etc/at.allow(deny) 这两个档案来限制：       

* 限制使用者原理：当使用者执行 at 时，系统会
      　
1. 先找寻 /etc/at.allow 这个档案，写在这个档案中的使用者才能使用 at ，
没有在这个档案中的使用者则不能使用 at ( 即使没有写在 at.deny 当中  )；
2. 如果没有 /etc/at.allow 就寻找 /etc/at.deny 这个档案，
若写在这个 at.deny 的使用者则不能使用 at ，而没有在这个 at.deny 档案中的使用者
，就可以使用 at 咯；
3. 如果两个档案都不存在，那么只有 root 可以使用 at 这个指令。 

[test @test test]# at [-m] TIME　　　　(下达工作指令)
[test @test test]# atq　　　　　　　　 (查看目前的工作排程)
[test @test test]# atrm [jobnumber]　　(删除排程)
参数说明：
-m    ：执行 at 所规范的工作排程时，将屏幕输出结果 mail 给下达指令的使用者
TIME  ：时间的格式，有底下几个：
　　　HH:MM YYYY-MM-DD　　　　　　　　　　　 　ex> 04:00 2002-05-30 (五月三十号四点执行)
　　　HH[pm;am] + number [hours;days;weeks]　　ex> 4pm + 3 days (在过 3 天的下午 4 点)
　　　HH:MM　　　　　　　　　　　　　　　　　　ex> 12:00 (今天的 12 点执行)
　　　HH[pm;am] [Month] [Day]　　　　　　　　　ex> 1pm May 30
jobnumber：每一个 at 工作排程都有编排的顺序！这个即是！ 




    这个循环的例行性命令其实就是 cron 这个服务啦 (crond)！
    当你下达 crontab 的指令之后，会将你的命令写入 /var/spool/cron这个目录当中呦！
    例如 test 下达了他的 crontab 命令，那么就会自动产生 /var/spool/cron/test 这个档案！
    『但请注意，这个档案不能直接编辑！』然后执行的指令记录会放置在 /var/log/cron 这个档案中！
    所以，『如果您的 Linux 系统不知道是否被木马入侵时，可以搜寻一下 /var/log/cron 这个记录挡，
    视察看看有没有被搞鬼？』

    好了！我们来看一下 crontab 的指令语法吧！
    
 [test @test test]# crontab [-u user] [-l | -e | -r]
参数说明：
-u user ：只有 root 能下达的参数，视察或编译其它使用者的 crontab 内容
-l      ：列出 crontab 的内容
-e      ：编辑 crontab 的内容
-r      ：删除 crontab 的内容
范例：
一般使用者 test 要在每天的 12:00 发信给自己：

[test @test test]# crontab -e <==自己编辑自己的 crontab 内容

进入 crontab 编辑内容，使用 vi 呦！

0 12 * * * mail test < /home/test/test.txt
分时日月周 |========指令列===============|   
    
分　　（0-59）
小时　（0-23）
日期　（1-31）
月份　（1-12）
周　　（0-6）
数字代表的意义
	
分钟          小时                         日期                      月份             周                  范围
	
0-59   0-23         1-31        1-12     0-6    (0为星期天)



例题一：假如你的女朋友生日是 5 月 2 日，你想要在 5 月 1 日的 23:59 发一封信给他，
　　　　这封信的内容已经写在 /home/test/lover.txt 中了

[test @test test]# crontab -e

59 23 1 5 * mail pigpp < /home/test/lover.txt
那样的话，每年 pigpp 都会收到你的这封信喔！（当然啰，信的内容就要每年变一变啦！）
 
例题二：假如你每隔五分钟要去 check 你的一个名为 test.sh 的批次档一次，则：

[test @test test]# crontab -e

59 23 1 5 * mail pigpp < /home/test/lover.txt  <==刚刚的那个指令还存在呦！
*/5 * * * * /home/test/test.sh  <==新加入的一个排程！

[test @test test]# crontab -r
[test @test test]# crontab -l
no crontab for test
看到了吗？ crontab 『整个内容都不见了！』所以请注意：
『如果只是要删除某个 crontab 的工作项目，那么请使用 crontab -e 来重新编辑即可！』
如果使用 -r 的参数，是会将所有的 crontab 数据内容都删掉的！千万注意了！

这个『 crontab -e 』是针对使用者的 cron 来设计的，如果是『系统的例行性任务』时，
该怎么办呢？是否还是需要以 crontab -e 来管理你的例行性命令呢？
当然不需要，你只要编辑 /etc/crontab这个档案就可以啦！
有一点需要特别注意喔！那就是 crontab -e 这个 crontab 其实是 /usr/bin/crontab 这个执行档，
但是 /etc/crontab 可是一个『纯文字文件』喔！你可以 root 的身份编辑一下这个档案哩！

基本上， cron 这个服务的最低侦测限制是『分钟』，
所以『 cron 会每分钟去读取一次 /etc/crontab 与 /var/spool/cron 里面的数据内容』，
因此，只要你编辑完 /etc/crontab 这个档案，并且将他储存之后，呵呵！
那么 crontab 的设定就自动的会来执行了！ 


    注意：在 Linux 底下的 crontab 会自动的帮我们每分钟重新读取一次 /etc/crontab 的例行工作事项，
    但是某些原因或者是其它的 Unix 系统中，由于 crontab 是读到内存当中的，
    所以在你修改完 /etc/crontab 之后，可能并不会马上执行，这个时候请重新启动 crond 这个服务吧！

        /etc/rc.d/init.d/crond restart
        
        
      当然啰， /etc/cron.min 这个目录是需要存在的喔！那如果我需要执行的是一个『程序』而已，
      不需要用到一个目录呢？该如何是好？例如在侦测网络流量时，我们希望每五分钟侦测分析一次，可以这样写：

            */5 * * * * root /usr/local/mrtg-2/bin/mrtg /usr/local/apache/htdocs/mrtg/net/mrtg.cfg

      没有了 run-parts 就是代表『一个档案』的意思啦！

      
[root@test /root]# vi /etc/crontab
1,6,11,16,21,26,31,36,41,46,51,56 * * * * root ........  <==那个 .. 代表你的指令
2,7,12,17,22,27,32,37,42,47,52,57 * * * * root ........
3,8,13,18,23,28,33,38,43,48,53,58 * * * * root ........
4,9,14,19,24,29,34,39,44,49,54,59 * * * * root ........
看到了没？那个『 , 』分隔的时候，请注意，不要有空格符！
（连续的意思）如此一来，则可以将每五分钟工作的流程分别在不同的时刻来工作！则可以让系统的执行较为顺畅呦！ 

     
      